name: CI/CD Pipeline for Book Store Microservices

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  JAVA_VERSION: "17"
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode --errors --fail-at-end --show-version"
  DOCKER_REGISTRY: ghcr.io
  DOCKER_REPOSITORY: ${{ github.repository_owner }}/bookstore

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test All Services
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: bookstore_user
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: bookstore
          RABBITMQ_DEFAULT_PASS: password
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Verify Maven wrapper
        run: |
          chmod +x mvnw
          ./mvnw --version

      - name: Compile all modules
        run: ./mvnw clean compile ${{ env.MAVEN_CLI_OPTS }}

      - name: Run unit tests
        run: ./mvnw test ${{ env.MAVEN_CLI_OPTS }}

      - name: Run integration tests
        run: ./mvnw verify -P integration-tests ${{ env.MAVEN_CLI_OPTS }}
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: bookstore_user
          SPRING_DATASOURCE_PASSWORD: password
          SPRING_REDIS_HOST: localhost
          SPRING_REDIS_PORT: 6379
          SPRING_RABBITMQ_HOST: localhost
          SPRING_RABBITMQ_PORT: 5672
          SPRING_RABBITMQ_USERNAME: bookstore
          SPRING_RABBITMQ_PASSWORD: password

      - name: SonarQube analysis
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=bookstore-microservices \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Package applications
        run: ./mvnw package -DskipTests ${{ env.MAVEN_CLI_OPTS }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: |
            */target/*.jar
            !*/target/*-sources.jar
            !*/target/*-javadoc.jar
          retention-days: 5

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            */target/surefire-reports/
            */target/failsafe-reports/
          retention-days: 5

  # Job 2: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Run OWASP Dependency Check
        run: |
          ./mvnw org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DskipTestScope=true

      - name: Upload OWASP Dependency Check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-results
          path: target/dependency-check-report.html
          retention-days: 5

  # Job 3: Build Docker Images
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push'

    strategy:
      matrix:
        service:
          - api-gateway
          - user-service
          - book-service
          - inventory-service
          - order-service
          - rental-service
          - notification-service
          - report-service
          - auth-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job 4: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS Staging
        run: |
          echo "Deploying to staging environment..."
          # Update ECS task definitions and services
          for service in api-gateway user-service book-service inventory-service order-service rental-service notification-service report-service auth-service; do
            echo "Updating $service..."
            aws ecs update-service \
              --cluster bookstore-staging \
              --service $service \
              --force-new-deployment
          done

      - name: Wait for deployment
        run: |
          echo "Waiting for services to stabilize..."
          sleep 60

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add your smoke test commands here
          curl -f http://staging-api-gateway.bookstore.com/health || exit 1

  # Job 5: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Blue-Green Deployment to Production
        run: |
          echo "Starting blue-green deployment to production..."
          # Implement blue-green deployment logic
          # This is a simplified example - implement according to your infrastructure

          # Update task definitions
          for service in api-gateway user-service book-service inventory-service order-service rental-service notification-service report-service auth-service; do
            echo "Updating $service task definition..."
            
            # Get current task definition
            TASK_DEFINITION=$(aws ecs describe-task-definition \
              --task-definition bookstore-prod-$service \
              --query 'taskDefinition' \
              --output json)
            
            # Update image URI
            NEW_IMAGE="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/$service:main-${{ github.sha }}"
            
            # Create new task definition revision
            aws ecs register-task-definition \
              --cli-input-json "$TASK_DEFINITION" \
              --family bookstore-prod-$service
          done

      - name: Update ECS services
        run: |
          # Update services to use new task definitions
          for service in api-gateway user-service book-service inventory-service order-service rental-service notification-service report-service auth-service; do
            echo "Updating ECS service: $service"
            aws ecs update-service \
              --cluster bookstore-production \
              --service $service \
              --force-new-deployment
          done

      - name: Wait for deployment completion
        run: |
          echo "Waiting for production deployment to complete..."
          sleep 120

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add comprehensive health checks
          curl -f https://api.bookstore.com/health || exit 1

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Implement rollback logic
          for service in api-gateway user-service book-service inventory-service order-service rental-service notification-service report-service auth-service; do
            aws ecs update-service \
              --cluster bookstore-production \
              --service $service \
              --task-definition bookstore-prod-$service:PREVIOUS
          done

  # Job 6: Notify
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify on Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#bookstore-deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
